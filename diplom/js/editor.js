document.addEventListener('DOMContentLoaded', function() {
    // –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const usernameDisplay = document.getElementById('username-display');
    const newTextBtn = document.getElementById('new-text-btn');
    const saveTextBtn = document.getElementById('save-text-btn');
    const deleteTextBtn = document.getElementById('delete-text-btn');
    const textsList = document.getElementById('texts-list');
    const textTitle = document.getElementById('text-title');
    const chaptersContainer = document.getElementById('chapters-container');

    // –≠–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const formattingTools = {
        boldBtn: document.getElementById('bold-btn'),
        italicBtn: document.getElementById('italic-btn'),
        underlineBtn: document.getElementById('underline-btn'),
        strikeBtn: document.getElementById('strike-btn'),
        fontFamily: document.getElementById('font-family'),
        fontSize: document.getElementById('font-size'),
        textColor: document.getElementById('text-color'),
        alignLeftBtn: document.getElementById('align-left-btn'),
        alignCenterBtn: document.getElementById('align-center-btn'),
        alignRightBtn: document.getElementById('align-right-btn'),
        insertLinkBtn: document.getElementById('insert-link-btn'),
        wordCountBtn: document.getElementById('word-count-btn'),
        nightModeBtn: document.getElementById('night-mode-btn'),
        scriptFormatBtn: document.getElementById('script-format-btn'),
        scriptFormatTools: document.getElementById('script-format-tools'),
        characterBtn: document.getElementById('character-btn'),
        dialogueBtn: document.getElementById('dialogue-btn'),
        parentheticalBtn: document.getElementById('parenthetical-btn')
    };

    // –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–ª–∞–≤–∞–º–∏ –∏ –∑–∞–º–µ—Ç–∫–∞–º–∏
    const chapterTools = {
        addChapterBtn: document.getElementById('add-chapter-btn'),
        addPageBtn: document.getElementById('add-page-btn'),
        toggleNotesBtn: document.getElementById('toggle-notes-btn'),
        notesSidebar: document.getElementById('notes-sidebar'),
        notesContainer: document.getElementById('notes-container'),
        addNoteBtn: document.getElementById('add-note-btn')
    };

    // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
    const modals = {
        statsModal: document.getElementById('stats-modal'),
        linkModal: document.getElementById('link-modal'),
        linkUrl: document.getElementById('link-url'),
        linkText: document.getElementById('link-text'),
        insertLinkConfirm: document.getElementById('insert-link-confirm')
    };

    let currentTextId = localStorage.getItem('lastOpenedTextId') || null;
    let currentSelectedElement = null;
    let savedSelection = null;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
    initEditor();

    function initEditor() {
        checkAuth();
        loadTexts();
        setupCardLinking();
        setupEventListeners();
        checkNightMode();
    }

    function setupCardLinking() {
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏
        const insertCardLinkBtn = document.createElement('button');
        insertCardLinkBtn.id = 'insert-card-link-btn';
        insertCardLinkBtn.title = '–°–≤—è–∑–∞—Ç—å —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π (Ctrl+Shift+K)';
        insertCardLinkBtn.innerHTML = 'üÉè';

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ –∫–Ω–æ–ø–∫–∏ –≤—Å—Ç–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏
        const insertLinkBtn = document.getElementById('insert-link-btn');
        if (insertLinkBtn && insertLinkBtn.parentNode) {
            insertLinkBtn.parentNode.insertBefore(insertCardLinkBtn, insertLinkBtn.nextSibling);
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–Ω–æ–ø–∫—É
        formattingTools.insertCardLinkBtn = insertCardLinkBtn;

        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
        const cardLinkModal = document.createElement('div');
        cardLinkModal.id = 'card-link-modal';
        cardLinkModal.className = 'modal';
        cardLinkModal.innerHTML = `
            <div class="modal-content">
                <span class="close">&times;</span>
                <h2>–°–≤—è–∑–∞—Ç—å —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π</h2>
                <div class="modal-controls">
                    <select id="card-link-type">
                        <option value="">–í—Å–µ —Ç–∏–ø—ã</option>
                        <option value="character">–ü–µ—Ä—Å–æ–Ω–∞–∂–∏</option>
                        <option value="location">–õ–æ–∫–∞—Ü–∏–∏</option>
                        <option value="event">–°–æ–±—ã—Ç–∏—è</option>
                    </select>
                    <input type="text" id="card-link-search" placeholder="–ü–æ–∏—Å–∫ –∫–∞—Ä—Ç–æ—á–∫–∏..." autocomplete="off">
                </div>
                <div id="card-link-list" class="card-link-list"></div>
            </div>
        `;
        document.body.appendChild(cardLinkModal);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –ø–æ —Å–≤—è–∑–∞–Ω–Ω—ã–º –∫–∞—Ä—Ç–æ—á–∫–∞–º –≤ —Ç–µ–∫—Å—Ç–µ
        document.addEventListener('click', function(e) {
            if (e.target.classList.contains('card-link')) {
                e.preventDefault();
                const cardId = e.target.dataset.cardId;
                showCardPreview(cardId);
            }
        });
    }

    function showCardPreview(cardId) {
        fetch(`php/cards.php?action=get&id=${cardId}`)
            .then(response => response.json())
            .then(card => {
                // –°–æ–∑–¥–∞–µ–º overlay
                const overlay = document.createElement('div');
                overlay.className = 'modal-overlay';

                // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é –∫–∞—Ä—Ç–æ—á–∫–∏
                const preview = document.createElement('div');
                preview.className = 'card-preview';
                preview.innerHTML = `
                    <div class="card-preview-header">
                        <h3>${card.title}</h3>
                        <span class="type-badge ${card.type}">${getTypeName(card.type)}</span>
                    </div>
                    <div class="card-preview-content">${card.content || '<em>–ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ</em>'}</div>
                    ${card.fields ? renderCardFields(JSON.parse(card.fields)) : ''}
                    <div class="card-preview-footer">
                        <button class="btn close-preview">–ó–∞–∫—Ä—ã—Ç—å</button>
                        <button class="btn open-card" data-id="${card.id}">–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É</button>
                    </div>
                `;

                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
                preview.querySelector('.close-preview').addEventListener('click', () => {
                    overlay.remove();
                });

                preview.querySelector('.open-card').addEventListener('click', (e) => {
                    window.open(`cards.html#card-${card.id}`, '_blank');
                });

                overlay.appendChild(preview);
                document.body.appendChild(overlay);

                // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ overlay
                overlay.addEventListener('click', (e) => {
                    if (e.target === overlay) {
                        overlay.remove();
                    }
                });
            })
            .catch(error => {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏:', error);
                alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–æ—á–∫–µ');
            });
    }

    function renderCardFields(fields) {
        if (!fields || Object.keys(fields).length === 0) return '';

        let html = '<div class="card-fields"><h4>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è</h4><dl>';
        for (const [key, value] of Object.entries(fields)) {
            if (value) {
                html += `<dt>${key}</dt><dd>${value}</dd>`;
            }
        }
        html += '</dl></div>';
        return html;
    }

    function getTypeName(type) {
        const types = {
            'character': '–ü–µ—Ä—Å–æ–Ω–∞–∂',
            'location': '–õ–æ–∫–∞—Ü–∏—è',
            'event': '–°–æ–±—ã—Ç–∏–µ',
            'other': '–î—Ä—É–≥–æ–µ'
        };
        return types[type] || type;
    }

    function saveSelection() {
        const selection = window.getSelection();
        if (selection.rangeCount > 0) {
            savedSelection = selection.getRangeAt(0);
        }
    }

    function restoreSelection() {
        if (savedSelection) {
            const selection = window.getSelection();
            selection.removeAllRanges();
            selection.addRange(savedSelection);
        }
    }

    function showCardLinkModal() {
        saveSelection(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞

        const selection = window.getSelection();
        const selectedText = selection.toString().trim();
        if (!selection.toString().trim()) {
            alert('–í—ã–¥–µ–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Å–≤—è–∑–∞—Ç—å —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π');
            return;
        }

        const modal = document.getElementById('card-link-modal');
        modal.style.display = 'block';

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        const title = modal.querySelector('h2');
        title.textContent = `–°–≤—è–∑–∞—Ç—å "${selectedText}" —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π`;

        // –°–±—Ä–æ—Å –ø–æ–∏—Å–∫–∞
        document.getElementById('card-link-search').value = '';
        document.getElementById('card-link-type').value = '';

        loadCardsForLinking();

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        document.getElementById('card-link-search').addEventListener('input', (e) => {
            loadCardsForLinking(e.target.value, document.getElementById('card-link-type').value);
        });

        document.getElementById('card-link-type').addEventListener('change', (e) => {
            loadCardsForLinking(document.getElementById('card-link-search').value, e.target.value);
        });
    }

    function loadCardsForLinking(searchQuery = '', type = '') {
        let url = 'php/cards.php?action=list';
        if (searchQuery || type) {
            url += `&search=${encodeURIComponent(searchQuery)}&type=${encodeURIComponent(type)}`;
        }

        fetch(url)
            .then(response => response.json())
            .then(cards => {
                const list = document.getElementById('card-link-list');
                list.innerHTML = '';

                if (cards.length === 0) {
                    list.innerHTML = '<div class="no-cards">–ö–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
                    return;
                }

                cards.forEach(card => {
                    const cardElement = document.createElement('div');
                    cardElement.className = `card-link-item ${card.type}`;
                    cardElement.innerHTML = `
                        <div class="card-link-title">${card.title}</div>
                        <div class="card-link-type">${getTypeName(card.type)}</div>
                    `;
                    cardElement.dataset.id = card.id;

                    cardElement.addEventListener('click', () => {
                        linkTextToCard(card.id);
                    });

                    list.appendChild(cardElement);
                });
            })
            .catch(error => {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫:', error);
                document.getElementById('card-link-list').innerHTML =
                    '<div class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫</div>';
            });
    }

    function linkTextToCard(cardId) {
        restoreSelection(); // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ–º

        const selection = window.getSelection();
        if (selection.rangeCount === 0 || selection.isCollapsed) {
            alert('–í—ã–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–¥–µ–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–Ω–æ–≤–∞.');
            return;
        }

        const range = selection.getRangeAt(0);
        const selectedText = range.toString().trim();

        if (!selectedText) {
            alert('–í—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—É—Å—Ç');
            return;
        }

        // –°–æ–∑–¥–∞–µ–º span —Å –∫–ª–∞—Å—Å–æ–º –∏ data-–∞—Ç—Ä–∏–±—É—Ç–æ–º
        const span = document.createElement('span');
        span.className = 'card-link';
        span.dataset.cardId = cardId;
        span.textContent = selectedText;

        // –ó–∞–º–µ–Ω—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        range.deleteContents();
        range.insertNode(span);

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        document.getElementById('card-link-modal').style.display = 'none';

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        saveText();

        console.log(`–¢–µ–∫—Å—Ç "${selectedText}" —Å–≤—è–∑–∞–Ω —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π ID: ${cardId}`);
    }

    function checkAuth() {
        fetch('php/auth.php?action=check')
            .then(handleResponse)
            .then(data => {
                if (data.loggedIn) {
                    if (usernameDisplay) {
                        usernameDisplay.textContent = data.username;
                    }
                } else {
                    window.location.href = 'index.html';
                }
            })
            .catch(handleError);
    }

    function loadTexts() {
        fetch('php/texts.php?action=list')
            .then(handleResponse)
            .then(data => {
                textsList.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç</option>';
                data.forEach(text => {
                    const option = document.createElement('option');
                    option.value = text.id;
                    option.textContent = text.title;
                    textsList.appendChild(option);
                });

                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–∫—Ä—ã—Ç—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞
                if (currentTextId) {
                    textsList.value = currentTextId;
                    loadText(currentTextId);
                }
            })
            .catch(handleError);
    }

    function loadText(textId) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–µ–∫—Å—Ç–∞ –≤ localStorage
        localStorage.setItem('lastOpenedTextId', textId);
        currentTextId = textId;

        fetch(`php/texts.php?action=get&id=${textId}`)
            .then(response => {
                if (!response.ok) {
                    // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π ID
                    localStorage.removeItem('lastOpenedTextId');
                    currentTextId = null;
                    textsList.value = '';
                    throw new Error('–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
                }
                return response.json();
            })
            .then(data => {
                currentTextId = data.id;
                textTitle.value = data.title;

                try {
                    const content = JSON.parse(data.content);
                    renderTextContent(content);
                } catch (e) {
                    // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    chaptersContainer.innerHTML = data.content || '<div class="chapter"><div class="chapter-content" contenteditable="true"><p>–ù–∞—á–Ω–∏—Ç–µ –ø–∏—Å–∞—Ç—å –∑–¥–µ—Å—å...</p></div></div>';
                }
            })
            .catch(error => {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç–∞:', error);
                // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º alert, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–µ–π
                // –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –∏–ª–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
            });
    }

    function renderTextContent(content) {
        chaptersContainer.innerHTML = '';
        chapterTools.notesContainer.innerHTML = '';

        if (content.chapters && content.chapters.length > 0) {
            content.chapters.forEach(chapter => {
                // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - –µ—Å–ª–∏ –Ω–µ—Ç pages, —Å–æ–∑–¥–∞–µ–º –æ–¥–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—É
                if (!chapter.pages || chapter.pages.length === 0) {
                    addChapterElement(chapter.id, chapter.title, chapter.content || '<p>–ù–∞—á–Ω–∏—Ç–µ –ø–∏—Å–∞—Ç—å –∑–¥–µ—Å—å...</p>');
                } else {
                    // –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤—É —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
                    const chapterElement = document.createElement('div');
                    chapterElement.className = 'chapter';
                    chapterElement.id = chapter.id;

                    const titleElement = document.createElement('div');
                    titleElement.className = 'chapter-title';
                    titleElement.contentEditable = 'true';
                    titleElement.textContent = chapter.title || '–ù–æ–≤–∞—è –≥–ª–∞–≤–∞';
                    chapterElement.appendChild(titleElement);

                    const contentElement = document.createElement('div');
                    contentElement.className = 'chapter-content';

                    chapter.pages.forEach(page => {
                        const pageElement = document.createElement('div');
                        pageElement.className = 'page';
                        pageElement.contentEditable = 'true';
                        pageElement.innerHTML = page.content || '<p>–ù–∞—á–Ω–∏—Ç–µ –ø–∏—Å–∞—Ç—å –∑–¥–µ—Å—å...</p>';
                        contentElement.appendChild(pageElement);
                    });

                    chapterElement.appendChild(contentElement);
                    chaptersContainer.appendChild(chapterElement);
                }
            });
        } else {
            // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é –≥–ª–∞–≤—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            addChapterElement(`chapter-${Date.now()}`, '–ì–ª–∞–≤–∞ 1', '<p>–ù–∞—á–Ω–∏—Ç–µ –ø–∏—Å–∞—Ç—å –∑–¥–µ—Å—å...</p>');
        }

        if (content.notes && content.notes.length > 0) {
            content.notes.forEach(note => {
                addNoteElement(note.id, note.target, note.text);
            });
        }

        updateChapterNumbers();
    }

    function addChapterElement(id, title, content) {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–ª–∞–≤
        const chapterCount = document.querySelectorAll('.chapter').length + 1;
        const chapterTitle = title || `–ì–ª–∞–≤–∞ ${chapterCount}`;

        const chapterHTML = `
            <div class="chapter" id="${id}">
                <div class="chapter-title" contenteditable="true">${chapterTitle}</div>
                <div class="chapter-content">
                    <div class="page" contenteditable="true">${content || '<p>–ù–∞—á–Ω–∏—Ç–µ –ø–∏—Å–∞—Ç—å –∑–¥–µ—Å—å...</p>'}</div>
                </div>
            </div>
        `;
        chaptersContainer.insertAdjacentHTML('beforeend', chapterHTML);

        // –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤–æ–π –≥–ª–∞–≤—ã
        const chapterElement = document.getElementById(id);
        chapterElement.addEventListener('click', function(e) {
            if (e.target.classList.contains('chapter-title') ||
                e.target.classList.contains('page')) {
                currentSelectedElement = e.target;
            }
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é –≤—Å–µ—Ö –≥–ª–∞–≤
        updateChapterNumbers();
    }

    function updateChapterNumbers() {
        document.querySelectorAll('.chapter').forEach((chapter, index) => {
            const titleElement = chapter.querySelector('.chapter-title');
            if (titleElement) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ
                const currentText = titleElement.textContent;
                if (!currentText.startsWith('–ì–ª–∞–≤–∞ ')) return;

                titleElement.textContent = `–ì–ª–∞–≤–∞ ${index + 1}`;
            }
        });
    }

    function addNoteElement(id, targetId, text) {
        const noteHTML = `
            <div class="note" id="${id}" data-target="${targetId}">
                <p>${text}</p>
            </div>
        `;
        chapterTools.notesContainer.insertAdjacentHTML('beforeend', noteHTML);

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑—å —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º —Ç–µ–∫—Å—Ç–∞
        if (targetId) {
            const targetElement = document.getElementById(targetId);
            if (targetElement) {
                targetElement.dataset.noteId = id;
            }
        }
    }

    async function saveText() {
        try {
            const title = textTitle.value.trim();
            if (!title) {
                throw new Error('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è');
            }

            const content = {
                title: title,
                chapters: [],
                notes: [],
                cardLinks: [] // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤—è–∑–µ–π —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏
            };

            // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≥–ª–∞–≤–∞—Ö –∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
            document.querySelectorAll('.chapter').forEach(chapter => {
                const chapterTitle = chapter.querySelector('.chapter-title').innerHTML;
                const pages = [];

                chapter.querySelectorAll('.page').forEach(page => {
                    pages.push({
                        content: page.innerHTML
                    });

                    // –°–æ–±–∏—Ä–∞–µ–º —Å–≤—è–∑–∏ —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                    page.querySelectorAll('.card-link').forEach(link => {
                        content.cardLinks.push({
                            cardId: link.dataset.cardId,
                            text: link.textContent,
                            chapterId: chapter.id,
                            pageContent: page.innerHTML
                        });
                    });
                });

                content.chapters.push({
                    id: chapter.id,
                    title: chapterTitle,
                    pages: pages
                });
            });

            // –°–æ–±–∏—Ä–∞–µ–º –∑–∞–º–µ—Ç–∫–∏
            document.querySelectorAll('.note').forEach(note => {
                content.notes.push({
                    id: note.id,
                    target: note.dataset.target,
                    text: note.querySelector('p').innerHTML
                });
            });

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            const formData = new FormData();
            formData.append('title', title);
            formData.append('content', JSON.stringify(content));
            if (currentTextId) formData.append('id', currentTextId);

            const response = await fetch('php/texts.php?action=save', {
                method: 'POST',
                body: formData
            });

            const data = await response.json();

            if (!response.ok || !data.success) {
                throw new Error(data.message || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
            }

            loadTexts();
            if (!currentTextId) {
                currentTextId = data.id;
                textsList.value = data.id;
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
            alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ' + error.message);
        }
    }

    function deleteText() {
        if (!currentTextId) {
            alert('–ù–µ –≤—ã–±—Ä–∞–Ω —Ç–µ–∫—Å—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
            return;
        }

        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç?')) {
            return;
        }

        fetch(`php/texts.php?action=delete&id=${currentTextId}`)
            .then(handleResponse)
            .then(data => {
                if (data.success) {
                    currentTextId = null;
                    localStorage.removeItem('lastOpenedTextId'); // –£–¥–∞–ª—è–µ–º ID –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞
                    textTitle.value = '';
                    chaptersContainer.innerHTML = '';
                    chapterTools.notesContainer.innerHTML = '';
                    loadTexts();
                } else {
                    alert(data.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
                }
            })
            .catch(handleError);
    }

    function setupEventListeners() {
        // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        newTextBtn.addEventListener('click', () => {
            currentTextId = null;
            localStorage.removeItem('lastOpenedTextId'); // –£–¥–∞–ª—è–µ–º ID –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            textTitle.value = '';
            chaptersContainer.innerHTML = '';
            chapterTools.notesContainer.innerHTML = '';
            addChapterElement(`chapter-${Date.now()}`, '–ù–æ–≤–∞—è –≥–ª–∞–≤–∞', '<p>–ù–∞—á–Ω–∏—Ç–µ –ø–∏—Å–∞—Ç—å –∑–¥–µ—Å—å...</p>');
        });

        saveTextBtn.addEventListener('click', saveText);
        deleteTextBtn.addEventListener('click', deleteText);

        // –†–∞–±–æ—Ç–∞ —Å —Ç–µ–∫—Å—Ç–æ–º
        textsList.addEventListener('change', function() {
            const textId = this.value;
            if (textId) loadText(textId);
        });

        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        formattingTools.boldBtn.addEventListener('click', () => execCommandOnSelection('bold'));
        formattingTools.italicBtn.addEventListener('click', () => execCommandOnSelection('italic'));
        formattingTools.underlineBtn.addEventListener('click', () => execCommandOnSelection('underline'));
        formattingTools.strikeBtn.addEventListener('click', () => execCommandOnSelection('strikeThrough'));

        formattingTools.fontFamily.addEventListener('change', function() {
            execCommandOnSelection('fontName', false, this.value);
        });

        formattingTools.fontSize.addEventListener('change', function() {
            execCommandOnSelection('fontSize', false, this.value);
        });

        formattingTools.textColor.addEventListener('input', function() {
            execCommandOnSelection('foreColor', false, this.value);
        });

        formattingTools.alignLeftBtn.addEventListener('click', () => execCommandOnSelection('justifyLeft'));
        formattingTools.alignCenterBtn.addEventListener('click', () => execCommandOnSelection('justifyCenter'));
        formattingTools.alignRightBtn.addEventListener('click', () => execCommandOnSelection('justifyRight'));

        // –§–æ—Ä–º–∞—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è
        formattingTools.scriptFormatBtn.addEventListener('click', function() {
            formattingTools.scriptFormatTools.style.display =
                formattingTools.scriptFormatTools.style.display === 'none' ? 'flex' : 'none';
        });

        formattingTools.characterBtn.addEventListener('click', function() {
            execCommandOnSelection('formatBlock', false, 'h3');
            const blocks = document.querySelectorAll('.chapter-content h3');
            if (blocks.length > 0) {
                blocks[blocks.length - 1].classList.add('character');
            }
        });

        formattingTools.dialogueBtn.addEventListener('click', function() {
            execCommandOnSelection('formatBlock', false, 'div');
            const blocks = document.querySelectorAll('.chapter-content div');
            if (blocks.length > 0) {
                blocks[blocks.length - 1].classList.add('dialogue');
            }
        });

        formattingTools.parentheticalBtn.addEventListener('click', function() {
            execCommandOnSelection('formatBlock', false, 'div');
            const blocks = document.querySelectorAll('.chapter-content div');
            if (blocks.length > 0) {
                blocks[blocks.length - 1].classList.add('parenthetical');
            }
        });

        // –ì–ª–∞–≤—ã –∏ –∑–∞–º–µ—Ç–∫–∏
        chapterTools.addChapterBtn.addEventListener('click', function() {
            addChapterElement(`chapter-${Date.now()}`, '–ù–æ–≤–∞—è –≥–ª–∞–≤–∞', '<p>–ù–∞—á–Ω–∏—Ç–µ –ø–∏—Å–∞—Ç—å –∑–¥–µ—Å—å...</p>');
        });

        chapterTools.addPageBtn.addEventListener('click', function() {
            if (currentSelectedElement) {
                // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≥–ª–∞–≤—ã
                const chapterContent = currentSelectedElement.closest('.chapter-content');
                if (chapterContent) {
                    const pageCount = chapterContent.querySelectorAll('.page').length + 1;
                    const pageHTML = `<div class="page" contenteditable="true"><p>–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageCount}</p></div>`;
                    chapterContent.insertAdjacentHTML('beforeend', pageHTML);
                }
            } else {
                alert('–í—ã–±–µ—Ä–∏—Ç–µ –≥–ª–∞–≤—É, –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É');
            }
        });

        chapterTools.toggleNotesBtn.addEventListener('click', function() {
            chapterTools.notesSidebar.classList.toggle('visible');
        });

        chapterTools.addNoteBtn.addEventListener('click', function() {
            if (!currentSelectedElement) {
                alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É');
                return;
            }

            const noteText = prompt('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:');
            if (noteText) {
                const noteId = 'note-' + Date.now();
                addNoteElement(noteId, currentSelectedElement.id, noteText);
                currentSelectedElement.dataset.noteId = noteId;
            }
        });

        // –°–≤—è–∑—ã–≤–∞–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏
        formattingTools.insertCardLinkBtn.addEventListener('click', showCardLinkModal);

        // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
        formattingTools.insertLinkBtn.addEventListener('click', function() {
            modals.linkModal.style.display = 'block';
            modals.linkUrl.value = '';
            modals.linkText.value = '';
        });

        modals.insertLinkConfirm.addEventListener('click', function() {
            const url = modals.linkUrl.value.trim();
            const text = modals.linkText.value.trim() || url;

            if (url) {
                execCommandOnSelection('createLink', false, url);
                const selection = window.getSelection();
                if (selection.rangeCount && text !== url) {
                    const range = selection.getRangeAt(0);
                    if (range.startContainer.nodeName === 'A') {
                        range.startContainer.textContent = text;
                    } else if (range.startContainer.parentNode.nodeName === 'A') {
                        range.startContainer.parentNode.textContent = text;
                    }
                }
                modals.linkModal.style.display = 'none';
            }
        });

        formattingTools.wordCountBtn.addEventListener('click', showWordCount);

        // –ù–æ—á–Ω–æ–π —Ä–µ–∂–∏–º
        formattingTools.nightModeBtn.addEventListener('click', toggleNightMode);

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        document.querySelectorAll('.modal .close').forEach(btn => {
            btn.addEventListener('click', function() {
                this.closest('.modal').style.display = 'none';
            });
        });

        window.addEventListener('click', function(event) {
            if (event.target.classList.contains('modal')) {
                event.target.style.display = 'none';
            }
        });

        // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        document.addEventListener('keydown', handleHotkeys);
    }

    function execCommandOnSelection(command, showUI = false, value = null) {
        const selection = window.getSelection();
        if (selection.rangeCount > 0 && selection.toString().length > 0) {
            document.execCommand(command, showUI, value);
        } else if (currentSelectedElement) {
            const range = document.createRange();
            range.selectNodeContents(currentSelectedElement);
            selection.removeAllRanges();
            selection.addRange(range);
            document.execCommand(command, showUI, value);
            selection.removeAllRanges();
        }
    }



    function showWordCount() {
        let totalWords = 0;
        let totalChars = 0;
        let totalCharsNoSpaces = 0;
        let paragraphs = 0;

        document.querySelectorAll('.chapter-content').forEach(chapter => {
            const text = chapter.innerText;
            totalWords += text.trim() ? text.trim().split(/\s+/).length : 0;
            totalChars += text.length;
            totalCharsNoSpaces += text.replace(/\s+/g, '').length;
            paragraphs += chapter.querySelectorAll('p').length;
        });

        modals.statsModal.style.display = 'block';
        document.getElementById('stats-content').innerHTML = `
            <p>–°–ª–æ–≤: ${totalWords}</p>
            <p>–°–∏–º–≤–æ–ª–æ–≤: ${totalChars}</p>
            <p>–°–∏–º–≤–æ–ª–æ–≤ (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤): ${totalCharsNoSpaces}</p>
            <p>–ê–±–∑–∞—Ü–µ–≤: ${paragraphs}</p>
            <p>–ì–ª–∞–≤: ${document.querySelectorAll('.chapter').length}</p>
        `;
    }

    function toggleNightMode() {
        document.body.classList.toggle('night-mode');
        localStorage.setItem('nightMode', document.body.classList.contains('night-mode'));
    }

    function checkNightMode() {
        if (localStorage.getItem('nightMode') === 'true') {
            document.body.classList.add('night-mode');
        }
    }

    function logoutUser() {
        fetch('php/auth.php?action=logout')
            .then(handleResponse)
            .then(data => {
                if (data.success) {
                    window.location.href = 'index.html';
                }
            })
            .catch(handleError);
    }

    function handleHotkeys(e) {
        if (document.activeElement.tagName === 'INPUT' || document.activeElement.tagName === 'TEXTAREA') return;

        if (e.ctrlKey || e.metaKey) {
            switch (e.key.toLowerCase()) {
                case 'b': e.preventDefault(); formattingTools.boldBtn.click(); break;
                case 'i': e.preventDefault(); formattingTools.italicBtn.click(); break;
                case 'k':
                    if (e.shiftKey) {
                        e.preventDefault();
                        formattingTools.insertCardLinkBtn.click();
                    } else {
                        e.preventDefault();
                        formattingTools.insertLinkBtn.click();
                    }
                    break;
                case 's': e.preventDefault(); saveText(); break;
                case 'n': if (e.shiftKey) { e.preventDefault(); chapterTools.addNoteBtn.click(); } break;
                case 'h': e.preventDefault(); chapterTools.addChapterBtn.click(); break;
            }
        }
    }

    function handleResponse(response) {
        const contentType = response.headers.get('content-type');
        if (!contentType || !contentType.includes('application/json')) {
            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        }
        return response.json();
    }

    function handleError(error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        alert(error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É');
    }

    // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    setInterval(() => {
        if (currentTextId || textTitle.value.trim() !== '') {
            saveText();
        }
    }, 30000);
});
